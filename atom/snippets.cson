# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.php':
  '<?php':
    'prefix': 'php'
    'body': """
    <?php

    declare(strict_types = 1);

    $0
    """
  '<?':
    'prefix': '<?'
    'body': """
    <?php

    declare(strict_types = 1);

    $0
    """
  'interface':
    'prefix': 'interface'
    'body': 'interface $0\n{\n\n}'
  'multiline comment':
    'prefix': '/**'
    'body': """
    /**
     * $0
     */
    """
  'namespace':
    'prefix': 'name'
    'body': 'namespace '
  'namespace 2':
    'prefix': 'nam'
    'body': 'namespace '
  'public function':
    'prefix': 'puf'
    'body': """
        public function $0()
        {

        }
    """
  'private function':
    'prefix': 'prf'
    'body': """
        private function $0()
        {

        }
    """
  'protected function':
    'prefix': 'ptf'
    'body': """
        protected function $0()
        {

        }
    """
  '__construct()':
    'prefix': '__construct'
    'body': """
        public function __construct()
        {
            $0
        }
    """
  'class':
    'prefix': 'class'
    'body': """
    class $0
    {

    }
    """
  'unit test class':
    'prefix': 'tuclass'
    'body': """
    use PHPUnit\\\\Framework\\\\TestCase;

    class $0 extends TestCase
    {

    }
    """
  'extends':
    'prefix': 'extends'
    'body': 'extends $0'
  'implements':
    'prefix': 'implements'
    'body': 'implements $0'
  'var_dump die':
    'prefix': 'vdd'
    'body': """
    var_dump($0);
    die;
    """
  'dump die':
    'prefix': 'dd'
    'body': """
    dump($0);
    die;
    """
  'foreach …':
    'prefix': 'foreach'
    'body': 'foreach($${1:variable} as $${2:key} ${3:=> $${4:value}}) \n{\n\t${0:# code...}\n}'
  'if …':
    'prefix': 'if'
    'body': 'if(${1:condition})\n{\n\t${0}\n}\n'
  'function …':
    'prefix': 'fun'
    'body': '${1:public }function ${2:FunctionName}(${3:$${4:value}${5:=\'\'}})\n{\n\t${0:# code...}\n}'
  'anonymous function':
    'prefix': 'f',
    'body': 'function (${1:$${2:value}${3:=\'\'}}) {\n\t${0:# code...}\n}'
  '$this->…':
    'prefix': '$this'
    'body': '$this->$0'
